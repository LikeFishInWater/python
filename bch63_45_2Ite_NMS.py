import math
import numpy as np
import tensorflow as tf

# # BCH(63,45)
Rate = 45 / 63
H = [
    [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,
     0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0,
        1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0,
        1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
        1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,
        0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,
        1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0,
        0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0,
        0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0,
        1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [
        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1,
        0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [
        1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [
        0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [
        0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [
        1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,
        1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [
        1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [
        1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,
        0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
Hi = [
    [1, 2, 0, 0, 3, 4, 5, 6, 0, 7, 0, 8, 0, 0, 9, 0, 10, 11, 0, 0, 12, 13, 14, 15, 16, 0, 0, 17, 0, 0, 18, 19, 0, 0, 0,
     0, 0, 20, 0, 0, 21, 22, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        25, 0, 26, 0, 27, 0, 0, 0, 28, 29, 30, 31, 32, 0, 33, 34, 35, 0, 36, 0, 37, 0, 0, 0, 0, 38, 0, 39, 40, 0, 41, 0,
        42, 0, 0, 0, 0, 43, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        49, 0, 0, 50, 51, 0, 52, 53, 0, 0, 54, 0, 55, 56, 57, 58, 0, 0, 0, 59, 60, 0, 61, 62, 63, 0, 64, 65, 66, 67, 68,
        0, 0, 69, 0, 0, 0, 70, 71, 72, 73, 0, 0, 74, 75, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        77, 0, 0, 0, 0, 0, 78, 0, 79, 80, 0, 0, 0, 81, 0, 82, 0, 83, 0, 0, 0, 0, 84, 0, 0, 85, 0, 0, 86, 87, 0, 0, 0, 0,
        88, 0, 0, 89, 90, 91, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 93, 0, 0, 0, 0, 0, 94, 0, 95, 96, 0, 0, 0, 97, 0, 98, 0, 99, 0, 0, 0, 0, 100, 0, 0, 101, 0, 0, 102, 103, 0,
        0, 0, 0, 104, 0, 0, 105, 106, 107, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 109, 0, 0, 0, 0, 0, 110, 0, 111, 112, 0, 0, 0, 113, 0, 114, 0, 115, 0, 0, 0, 0, 116, 0, 0, 117, 0, 0, 118,
        119, 0, 0, 0, 0, 120, 0, 0, 121, 122, 123, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 125, 0, 0, 0, 0, 0, 126, 0, 127, 128, 0, 0, 0, 129, 0, 130, 0, 131, 0, 0, 0, 0, 132, 0, 0, 133, 0, 0,
        134, 135, 0, 0, 0, 0, 136, 0, 0, 137, 138, 139, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 142, 0, 143, 144, 0, 0, 0, 145, 0, 146, 0, 147, 0, 0, 0, 0, 148, 0, 0, 149, 0,
        0, 150, 151, 0, 0, 0, 0, 152, 0, 0, 153, 154, 155, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 158, 0, 159, 160, 0, 0, 0, 161, 0, 162, 0, 163, 0, 0, 0, 0, 164, 0, 0, 165,
        0, 0, 166, 167, 0, 0, 0, 0, 168, 0, 0, 169, 170, 171, 0, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        173, 174, 0, 0, 175, 176, 0, 177, 0, 178, 0, 179, 180, 0, 0, 181, 182, 183, 0, 184, 185, 0, 186, 0, 187, 0, 0,
        188, 189, 0, 190, 0, 0, 0, 191, 192, 0, 193, 0, 0, 0, 194, 0, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
        0, 0, 0, 0, 0],
    [
        0, 197, 198, 0, 0, 199, 200, 0, 201, 0, 202, 0, 203, 204, 0, 0, 205, 206, 207, 0, 208, 209, 0, 210, 0, 211, 0,
        0, 212, 213, 0, 214, 0, 0, 0, 215, 216, 0, 217, 0, 0, 0, 218, 0, 219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
        0, 0, 0, 0, 0],
    [
        221, 222, 223, 224, 225, 226, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 228, 0, 229, 230, 231, 0, 0, 232, 0, 0, 233, 234,
        0, 235, 0, 236, 237, 0, 0, 0, 238, 0, 0, 239, 240, 241, 0, 242, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0,
        0, 0, 0, 0],
    [
        245, 0, 246, 247, 0, 0, 0, 248, 0, 249, 0, 250, 0, 0, 0, 0, 251, 0, 0, 252, 0, 0, 253, 254, 0, 0, 0, 0, 255, 0,
        0, 256, 257, 258, 0, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0],
    [
        0, 261, 0, 262, 263, 0, 0, 0, 264, 0, 265, 0, 266, 0, 0, 0, 0, 267, 0, 0, 268, 0, 0, 269, 270, 0, 0, 0, 0, 271,
        0, 0, 272, 273, 274, 0, 0, 0, 0, 0, 0, 0, 0, 275, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0],
    [
        0, 0, 277, 0, 278, 279, 0, 0, 0, 280, 0, 281, 0, 282, 0, 0, 0, 0, 283, 0, 0, 284, 0, 0, 285, 286, 0, 0, 0, 0,
        287, 0, 0, 288, 289, 290, 0, 0, 0, 0, 0, 0, 0, 0, 291, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0],
    [
        293, 294, 0, 295, 296, 0, 0, 297, 0, 298, 299, 300, 301, 0, 0, 0, 302, 303, 0, 304, 305, 306, 0, 307, 308, 309,
        310, 311, 0, 0, 312, 0, 0, 0, 313, 314, 315, 316, 0, 0, 317, 318, 0, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 320, 0, 0],
    [
        321, 0, 322, 0, 0, 0, 323, 324, 325, 326, 327, 0, 328, 329, 330, 0, 331, 0, 332, 0, 0, 0, 0, 333, 0, 334, 335,
        0, 336, 0, 337, 0, 0, 0, 0, 338, 339, 0, 340, 0, 341, 0, 342, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 344, 0],
    [
        345, 0, 0, 346, 347, 348, 349, 0, 350, 0, 351, 0, 0, 352, 0, 353, 354, 0, 0, 355, 356, 357, 358, 359, 0, 0, 360,
        0, 0, 361, 362, 0, 0, 0, 0, 0, 363, 0, 0, 364, 365, 0, 0, 366, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 368]
]
Hr = [
    [1, 2, 5, 6, 7, 8, 10, 12, 15, 17, 18, 21, 22, 23, 24, 25, 28, 31, 32, 38, 41, 42, 45, 46, 0, 0, 0, 0],
    [1, 3, 5, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 26, 28, 29, 31, 33, 38, 39, 41, 43, 45, 47, 0, 0, 0, 0],
    [1, 4, 5, 7, 8, 11, 13, 14, 15, 16, 20, 21, 23, 24, 25, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 44, 45, 48],
    [1, 7, 9, 10, 14, 16, 18, 23, 26, 29, 30, 35, 38, 39, 40, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 8, 10, 11, 15, 17, 19, 24, 27, 30, 31, 36, 39, 40, 41, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 9, 11, 12, 16, 18, 20, 25, 28, 31, 32, 37, 40, 41, 42, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 10, 12, 13, 17, 19, 21, 26, 29, 32, 33, 38, 41, 42, 43, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 11, 13, 14, 18, 20, 22, 27, 30, 33, 34, 39, 42, 43, 44, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [6, 12, 14, 15, 19, 21, 23, 28, 31, 34, 35, 40, 43, 44, 45, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 2, 5, 6, 8, 10, 12, 13, 16, 17, 18, 20, 21, 23, 25, 28, 29, 31, 35, 36, 38, 42, 44, 55, 0, 0, 0, 0],
    [2, 3, 6, 7, 9, 11, 13, 14, 17, 18, 19, 21, 22, 24, 26, 29, 30, 32, 36, 37, 39, 43, 45, 56, 0, 0, 0, 0],
    [1, 2, 3, 4, 5, 6, 14, 17, 19, 20, 21, 24, 27, 28, 30, 32, 33, 37, 40, 41, 42, 44, 45, 57, 0, 0, 0, 0],
    [1, 3, 4, 8, 10, 12, 17, 20, 23, 24, 29, 32, 33, 34, 43, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 4, 5, 9, 11, 13, 18, 21, 24, 25, 30, 33, 34, 35, 44, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [3, 5, 6, 10, 12, 14, 19, 22, 25, 26, 31, 34, 35, 36, 45, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 2, 4, 5, 8, 10, 11, 12, 13, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 31, 35, 36, 37, 38, 41, 42, 45, 61],
    [1, 3, 7, 8, 9, 10, 11, 13, 14, 15, 17, 19, 24, 26, 27, 29, 31, 36, 37, 39, 41, 43, 45, 62, 0, 0, 0, 0],
    [1, 4, 5, 6, 7, 9, 11, 14, 16, 17, 20, 21, 22, 23, 24, 27, 30, 31, 37, 40, 41, 44, 45, 63, 0, 0, 0, 0]]
Hc = [
    [1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 2, 3, 1, 2, 1, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 1, 2, 3, 1, 1, 2, 3, 4, 5, 6, 1,
     2, 3, 1, 1, 2, 3, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
    [
        2, 5, 6, 7, 2, 9, 3, 3, 4, 2, 3, 2, 3, 4, 2, 3, 2, 4, 5, 6, 2, 8, 3, 3, 3, 4, 5, 2, 3, 4, 2, 6, 7, 8, 9, 10,
        11, 2, 3, 4, 2, 6, 7, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        3, 10, 11, 12, 3, 10, 4, 5, 6, 4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 8, 3, 11, 4, 5, 6, 7, 8, 3, 4, 5, 3, 7, 8, 9, 10,
        11, 12, 3, 4, 5, 3, 7, 8, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        4, 11, 12, 13, 8, 11, 11, 10, 11, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 10, 7, 15, 9, 11, 10, 11, 12, 6, 7, 8, 5, 11,
        12, 13, 14, 15, 16, 4, 5, 6, 5, 8, 9, 10, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        10, 12, 13, 14, 10, 12, 17, 13, 14, 7, 8, 9, 10, 11, 9, 10, 10, 10, 11, 12, 9, 16, 10, 12, 14, 15, 16, 9, 10,
        11, 6, 12, 13, 14, 15, 16, 17, 7, 8, 9, 6, 10, 11, 12, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0],
    [
        12, 14, 15, 16, 12, 15, 18, 16, 17, 10, 11, 10, 11, 12, 17, 18, 11, 11, 12, 13, 10, 18, 13, 13, 15, 16, 17,
        10, 11, 12, 9, 13, 14, 15, 16, 17, 18, 10, 11, 12, 7, 12, 13, 14, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0],
    [
        13, 16, 17, 18, 14, 18, 0, 17, 18, 13, 14, 13, 14, 15, 0, 0, 12, 14, 15, 16, 11, 0, 18, 14, 16, 17, 18, 12,
        13, 14, 10, 0, 0, 0, 0, 0, 0, 16, 17, 18, 12, 16, 17, 18, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
    [
        16, 0, 0, 0, 15, 0, 0, 0, 0, 15, 16, 15, 16, 17, 0, 0, 13, 16, 17, 18, 12, 0, 0, 16, 0, 0, 0, 16, 17, 18, 15,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        17, 0, 0, 0, 16, 0, 0, 0, 0, 16, 17, 16, 17, 18, 0, 0, 16, 0, 0, 0, 14, 0, 0, 17, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        18, 0, 0, 0, 18, 0, 0, 0, 0, 17, 18, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 18, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
for i in range(11):
    for j in range(63):
        Hc[i][j] = Hc[i][j] - 1
for i in range(18):
    for j in range(28):
        Hr[i][j] = Hr[i][j] - 1
for i in range(18):
    for j in range(63):
        Hi[i][j] = Hi[i][j] - 1
EbN0 = 7
EsN0 = EbN0 - 10 * np.log(1 / Rate) / np.log(10)
sigma = math.sqrt(1 / 2 * 10 ** (-EsN0 / 10))
scale = 10000
trans = np.ones((scale, 63))
recei = np.ones((scale, 63))
for i in range(scale):
    recei[i] = trans[i] + sigma * np.random.randn(63)

# # graph # #
x = tf.placeholder(shape=[None, 63], dtype=tf.float32)
y = tf.placeholder(shape=[None, 63], dtype=tf.float32)
ops = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
# w_1 = [1.072093e-01, 2.641553e+00, 1.164271e+00, -4.535779e-01, 3.569771e+00, 1.632047e-01, 2.522977e+00, 7.783821e+00,
#        8.613283e+00, 2.546090e+00, 3.584815e+00, 8.222700e+00, 9.381461e+00, 8.622011e-01, 2.269277e+00, 2.449071e-01,
#        3.674023e+00, 2.622337e-01, 1.370160e+00, 1.355396e+00, -8.943436e-01, 1.459955e+00, 1.035531e+00, 4.022342e+00,
#        2.609096e+00, 1.022055e+00, 2.144917e+00, 7.101939e-01, 5.357427e+00, 9.853025e+00, 1.739256e+00, 3.097292e+00,
#        7.643439e+00, 1.139511e+00, 7.133375e+00, 7.899889e-01, 6.485999e+00, -1.901906e-01, 3.372213e+00, 2.230870e+00,
#        -6.228628e-01, 3.288768e+00, 3.854131e+00, 3.666671e+00, 1.470438e+00, -3.133713e+00, 2.750803e+00, 4.014549e+00,
#        1.399429e+00, 1.796473e+00, 3.951867e+00, 2.035233e+00, 5.091413e+00, -4.135989e+00, 3.659942e+00, 5.441880e+00,
#        2.685960e+00, 1.687590e+00, 2.364824e+00, 1.067253e+00, 1.295140e+00, 4.118804e+00, 3.208203e+00, 1.998808e+00,
#        2.194838e+00, 1.123921e+01, 3.355920e+00, 1.880778e+00, 2.563127e+00, -4.813049e-01, 6.650172e-01, 1.737516e+00,
#        2.210426e+00, 4.145747e+00, 7.512371e+00, 3.834819e+00, 5.686491e+00, 4.791471e+00, 7.798209e+00, 7.693649e+00,
#        3.729397e+00, 5.600792e+00, 4.796554e+00, 5.606978e+00, 7.921681e+00, 6.116654e+00, 8.774229e+00, 7.195374e+00,
#        1.223924e+01, 3.843768e+00, 3.334801e+00, 4.013430e+00, 2.532004e+00, 1.819404e+00, 3.510311e-01, 5.931738e+00,
#        1.782661e+00, 2.317008e+00, 6.976010e+00, 6.345107e+00, 6.940355e-01, 6.389741e+00, 3.819681e+00, 4.775683e+00,
#        4.393634e+00, 4.497208e+00, 5.716709e+00, 3.959020e+00, 2.968451e+00, 2.989983e+00, 1.034828e+01, 3.677257e+00,
#        6.100947e+00, 2.328096e+00, 2.564698e+00, 4.753278e+00, 2.170869e+00, 3.632635e+00, 6.129656e+00, 1.592390e+00,
#        4.337559e+00, 5.797853e+00, 1.547302e+00, 4.667509e+00, 1.320116e+00, 2.024071e+00, 5.909116e+00, 6.445531e+00,
#        2.043170e+00, 3.448881e+00, 3.985841e+00, 3.605036e+00, 3.202178e+00, 4.909118e+00, 4.729209e+00, 5.900900e+00,
#        7.779953e+00, 3.239938e+00, 5.169529e+00, 3.725453e+00, 1.252917e+00, 8.955493e+00, 6.368234e+00, 2.298961e+00,
#        3.488892e+00, 7.688487e+00, 7.071878e+00, 5.368408e+00, 5.688206e+00, 2.327051e+00, 9.245614e+00, 5.966435e+00,
#        1.133770e+00, 4.490733e+00, 4.424012e+00, 6.077019e+00, 3.432853e+00, 7.755955e+00, 7.349066e+00, 1.275950e+01,
#        7.403213e+00, 2.911562e-01, 6.229783e+00, 2.653623e+00, 1.223309e+00, 5.387861e-01, 4.403248e+00, 4.687711e+00,
#        5.880646e+00, 1.839608e+00, 5.520185e+00, 3.448723e+00, 1.667540e+00, 1.001201e-01, 2.832541e+00, 4.799269e+00,
#        -8.382689e-01, 2.569012e+00, 1.210490e+00, 1.728387e+00, 1.157145e+01, 5.805710e+00, 1.303511e+00, 1.194829e+00,
#        -2.995610e+00, 1.641577e+00, -6.749024e-01, 5.539340e+00, 1.300289e+00, 2.750921e+00, 1.234508e+00, 8.725597e+00,
#        5.636343e+00, 1.368578e+00, 2.573498e+00, 3.701515e+00, 5.696033e-01, -3.194532e+00, 8.131052e-01, 3.604008e+00,
#        4.974731e+00, 7.352667e+00, 8.973065e-01, 8.086029e-01, 4.282363e+00, 1.996578e+00, -6.874971e-01, -1.922741e+00,
#        -7.836502e-01, -3.380268e+00, 5.344505e+00, 1.735804e+00, -3.727469e-01, 6.586129e+00, 9.254746e-01,
#        3.452329e+00, 3.410316e+00, -2.223027e+00, 5.109804e+00, 3.703275e+00, 3.362373e+00, 2.066605e+00, 1.339021e+00,
#        -4.287198e-01, 8.331196e-01, 1.167786e+00, 8.420931e+00, 3.795689e-01, 2.202986e+00, 1.661197e+00, 7.988074e+00,
#        1.364535e+00, 1.740810e+00, 5.866421e+00, 2.144369e+00, -5.550669e-01, 8.663694e+00, 1.194058e+00, 1.528421e+00,
#        4.502774e+00, 1.864664e+00, 1.027248e+01, 1.099051e+00, 3.210310e+00, 1.730454e+00, 4.419292e+00, 5.923033e+00,
#        2.803607e+00, 4.426317e-01, 9.008365e-01, 2.534719e+00, 3.514408e+00, 5.119521e+00, 4.439281e+00, 4.910701e+00,
#        1.585336e+00, 3.953775e+00, 3.529630e+00, 5.340958e+00, 4.344955e+00, 2.531762e+00, 2.981124e+00, 7.909440e-01,
#        5.971146e+00, 9.819980e+00, 7.229139e+00, 5.162205e+00, 8.515699e+00, 1.141207e+01, 3.196205e+00, 1.281349e+00,
#        5.784507e+00, 3.529608e+00, 7.753476e+00, 6.419837e+00, 3.306813e+00, 4.478872e+00, 1.620066e+00, 6.174558e+00,
#        4.842601e+00, 6.476640e-01, 3.429938e+00, 8.114724e+00, 1.044955e+00, 3.153729e+00, 1.059944e+00, 3.837926e-01,
#        1.018185e+01, 3.486123e+00, 8.426826e+00, 1.807177e+00, 4.715926e+00, 8.981763e+00, 1.981432e+00, 8.614183e+00,
#        8.066367e-02, 3.196824e+00, -3.204302e+00, 5.298203e+00, -2.883381e+00, 2.001625e+00, -2.758976e+00,
#        2.166466e+00, 5.499040e+00, -2.803045e+00, 3.475673e+00, 1.016453e+01, 5.776972e+00, 2.908471e+00, 3.096206e+00,
#        5.541056e-01, -2.227052e+00, -3.165732e+00, -4.978510e+00, 3.376101e+00, -1.107162e+00, 1.882620e-01,
#        2.948962e+00, 1.115973e+00, 5.368967e+00, 1.907393e-01, 4.818695e+00, 1.453335e+00, 9.449245e-01, 5.231044e+00,
#        2.566067e+00, 1.702529e+00, 9.721426e-01, 2.586712e+00, 6.203612e-01, -1.243940e+00, 3.946864e+00, 5.680680e+00,
#        -4.376035e-01, 1.892360e+00, 5.369918e-01, 3.478129e+00, 1.590186e+00, 2.506284e+00, 1.564630e+00, 1.772860e+00,
#        3.527222e+00, -2.881482e-01, 3.852391e+00, 3.386520e+00, 7.184914e-01, -8.327653e-02, 4.255191e+00, 1.811976e+00,
#        -1.940970e-01, -3.288482e+00, 1.485818e+00, 3.769305e+00, 5.914246e+00, 9.546747e-01, -7.092268e-02,
#        4.915914e-03, 3.293029e+00, 1.441125e+00, 3.319972e+00, 4.372259e+00, 6.978446e+00, 1.406272e+00, 1.415952e+00,
#        5.048989e+00, 1.509079e+00, 5.678866e-01, 6.003350e+00]
# w_2 = [1.966980e+01, 9.108247e+00, 8.234860e+00, 1.422142e+01, 8.324809e+00, 1.416500e+01, 1.363370e+01, 1.144120e+01,
#        1.680993e+01, 1.020199e+01, 1.776442e+01, 8.917708e+00, 1.162776e+01, 1.684897e+01, 1.941948e+01, 1.300830e+01,
#        1.225864e+01, 1.067294e+01, 1.262126e+01, 9.314386e+00, 1.563971e+01, 1.330218e+01, 8.496439e+00, 1.454126e+01,
#        1.139458e+01, 8.800880e+00, 1.124847e+01, 1.274779e+01, 1.104576e+01, 9.799703e+00, 8.162215e+00, 1.088322e+01,
#        1.058783e+01, 1.165336e+01, 7.374609e+00, 1.180082e+01, 7.451081e+00, 1.059448e+01, 1.342331e+01, 1.195975e+01,
#        1.393166e+01, 1.041517e+01, 6.860042e+00, 1.744696e+01, 9.017394e+00, 2.401221e+01, 3.407101e+01, 2.384667e+01,
#        1.905328e+01, 2.632210e+01, 3.629961e+01, 2.341446e+01, 2.570904e+01, 2.477295e+01, 2.870755e+01, 3.211528e+01,
#        2.223180e+01, 2.602641e+01, 2.355542e+01, 3.846240e+01, 2.173283e+01, 2.097797e+01, 2.406357e+01]
# w1 = tf.Variable(w_1)
# w2 = tf.Variable(w_2)
w1 = tf.Variable(tf.ones(368, dtype=tf.float32))
w2 = tf.Variable(tf.ones(63, dtype=tf.float32)) * 1 / (2 * sigma ** 2)
output = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
output1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
outBit = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# check node
for i in range(18):
    for j in range(28):
        if Hr[i][j] != -1:
            ops[0][Hi[i][Hr[i][j]]] = 100.
            for t in range(28):
                if t != j and Hr[i][t] != -1:
                    ops[0][Hi[i][Hr[i][j]]] = tf.sign(ops[0][Hi[i][Hr[i][j]]]) * tf.sign(x[:, Hr[i][t]]) * tf.minimum(
                        tf.abs(x[:, Hr[i][t]]), tf.abs(ops[0][Hi[i][Hr[i][j]]]))
# variable node
for i in range(11):
    for j in range(63):
        if Hc[i][j] != -1:
            ops[1][Hi[Hc[i][j]][j]] = w2[j] * x[:, j]
            for t in range(11):
                if t != i and Hc[t][j] != -1:
                    ops[1][Hi[Hc[i][j]][j]] += w1[Hi[Hc[t][j]][j]] * ops[0][Hi[Hc[t][j]][j]]
# check node
for i in range(18):
    for j in range(28):
        if Hr[i][j] != -1:
            ops[2][Hi[i][Hr[i][j]]] = 100.
            for t in range(28):
                if t != j and Hr[i][t] != -1:
                    ops[2][Hi[i][Hr[i][j]]] = tf.sign(ops[2][Hi[i][Hr[i][j]]]) * tf.sign(ops[1][Hi[i][Hr[i][t]]]) * tf. \
                        minimum(tf.abs(ops[1][Hi[i][Hr[i][t]]]), tf.abs(ops[2][Hi[i][Hr[i][j]]]))
# output layer
for i in range(63):
    output[i] = w2[i] * x[:, i]
for i in range(11):
    for j in range(63):
        if Hc[i][j] != -1:
            output[j] += w1[Hi[Hc[i][j]][j]] * ops[2][Hi[Hc[i][j]][j]]
# loss function
cross_temp = 0
for i in range(63):
    output1[i] = 1 / (1 + math.e ** (-output[i]))
    cross_temp += (y[:, i] + 1) / 2 * tf.log(output1[i] + 1e-10) + (1 - (y[:, i] + 1) / 2) * tf.log(
        1 - output1[i] + 1e-10)
cross_entropy = tf.reduce_mean(cross_temp) / (-63)

# # training # #
learning_rate = 1e-2
# train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(cross_entropy)
train_step = tf.train.AdamOptimizer(learning_rate).minimize(cross_entropy)
sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)
loss_vec = []
batch_size = 2000
f1 = open('test.txt', 'w')
for i in range(scale):
    random_index = np.random.choice(scale, size=batch_size)
    T_recei = recei[random_index]
    T_trans = trans[random_index]
    # for j in range(1000):
    sess.run(train_step, feed_dict={x: T_recei, y: T_trans})
    temp_loss = sess.run(cross_entropy, feed_dict={x: T_recei, y: T_trans})
    loss_vec.append(temp_loss)
    if i % 50 == 0:
        print('temp_loss=' + str(temp_loss))
        f1.write(str(temp_loss) + '\n')
        # print('w1=' + str(sess.run(w1)) + '\nw2=' + str(sess.run(w2)))
        f1.write('w1=' + str(sess.run(w1)) + '\nw2=' + str(sess.run(w2)) + '\n')
f1.close()
